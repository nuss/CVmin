TITLE:: CV
summary:: A single floating point value or an array of such values constrained to a specific numerical range by a ControlSpec.
categories:: Conductor, Control, Libraries, Quarks, Streams-Events-Patterns
related:: Classes/Conductor, Classes/ControlSpec, Classes/Stream
DESCRIPTION::
A CV models a single link::Classes/Float:: or an link::Classes/Array:: of such values constrained to a specific numerical range by a link::Classes/ControlSpec::.

CV is derived from link::Classes/Stream:: so it can be used directly in Stream and link::Classes/Pattern:: definitions. code::CV:connect(view):: will connect a CV to a GUI ControlView in both Cocoa and Qt (as well as Swing).

GUI representations. A similar set of methods have been defined that connect argument arrays consisting of keys and CVs to link::Classes/Node::s, link::Classes/Bus::es, link::Classes/Buffer::s, and link::Classes/NodeProxy::s.

An link::Classes/SV:: is a CV that models an index into an array of link::Classes/Symbol::s. The array is held in the instance variable items. The symbol corresponding to the CV's current value can be accessed with the method link::Classes/SV#-item::.

CLASSMETHODS::

subsection:: Creation

METHOD:: new

ARGUMENT:: spec
Any object that responds to code::asSpec:: (code::nil::, a link::Classes/Symbol::, a link::Classes/ControlSpec::, an link::Classes/Array::) with a link::Classes/ControlSpec::. Some common ControlSpecs include:

code::
\unipolar, \bipolar, \freq, \lofreq, \midfreq, \widefreq, \phase, \rq, \audiobus, \controlbus, \midi, \midinote, \midivelocity, \db, \amp, \boostcut, \pan, \detune, \rate, \beats, \delay
::

ARGUMENT:: default
The initial value is constrained to lie within the range of the spec.

returns:: a code::CV::

METHOD:: viewDictionary
An link::Classes/IdentityDictionary::, holding the various view-classes for various gui-elements that may be used with CV as its keys and the class that syncs the view's value to the CV's value as its values:

code::
// Qt
IdentityDictionary[
	(RangeSlider -> CVSyncProps.new),
	(EZGui -> CVSyncValue),
	(NumberBox -> CVSyncValue),
	(Slider -> CVSyncInput),
	(PopUpMenu -> SVSync),
	(ListView -> SVSync),
	(Knob -> CVSyncInput),
	(Slider2D -> CVSyncProps.new),
	(Button -> CVSyncValue),
	(MultiSliderView -> CVSyncMulti),
	(TextView -> CVSyncText),
	(TextField -> CVSyncText),
	(StaticText -> CVSyncText),
]
::

METHOD:: initClass
Calls link::#*buildViewDictionary:: on startup.

METHOD:: buildViewDictionary
As the name suggests this method builds the link::#*viewDictionary#viewDictionary:: and prepares the various connectable view-elements (sliders, number-boxes etc.) for the use with CV. The method also takes care of the different GUI-schemes (Cocoa, Qt, Swing).

INSTANCEMETHODS::

subsection:: Setting the range of values on existing CVs

METHOD:: spec
Set the link::Classes/ControlSpec:: and (optionally) a default value - see also link::#*new::

code::
a = CV(\freq);
a.spec;
a.spec_(\bipolar, -1);
a.spec;
::

ARGUMENT:: s
any object that responds to asSpec (code::nil::, a link::Classes/Symbol::, a link::Classes/ControlSpec:: or an link::Classes/Array::) with a ControlSpec

ARGUMENT:: v
the initial value of the CV

METHOD:: sp
Set the values of the CV's link::Classes/ControlSpec:: explicitely.

code::
a = CV(\freq);
a.spec;
a.sp(0, 0, 100);
a.spec;
::

ARGUMENT:: default
inital value

ARGUMENT:: lo
smallest possible value

ARGUMENT:: hi
highest possible value

ARGUMENT:: step
smallest incremental change

ARGUMENT:: warp
either 'linear' or 'exponential'

In the case of exponential warp, min and max must be non-zero and the same sign.

METHOD:: db
Set the CV's spec to

code::ControlSpec(-100, 20, \lin, 1, 0)::

returns:: the CV

subsection:: Accessing

METHOD:: value
Set or get the current value of the CV.

ARGUMENT:: val
Usually a link::Classes/Float:: or an link::Classes/Integer::. If the CV's ControlSpec's code::minval::, code::maxval::, code::step:: and/or code::default:: is an array it may also be an link::Classes/Array:: of numeric values.

returns:: if used as a getter the current value of the CV

METHOD:: input
Similar as link::#-value:: but requires or returns a number ranging form 0 to 1 that corresponds to postion of  the current value between min and max.

ARGUMENT:: in
a number between 0 and 1

returns:: if used as a getter the current value of the CV normalized to a value between 0 and 1

METHOD:: windex
Interprets the value of the CV as a probability table and returns a weighted random value.

METHOD:: indexedBy
For use in Patterns: uses the value of key in the current Event as an index and returns the indexed value

ARGUMENT:: key
a link::Classes/Symbol::

returns:: the value indexed by code::key::

METHOD:: embedInStream

returns:: the yielded value of the CV

METHOD:: asInput
Return the in unmapped value of the given argument code::val:: (determined by the CV's link::CLasses/ControlSpec::). If an array of values is given an array of unmapped values will be returned. The given value strong::will not:: alter the CV's value.

ARGUMENT:: val
a single numerical value or an array of numerical values

discussion::
code::
c = CV(\freq);
c.asInput(100) // 0.23299000144534 - the unmapped value (input) for a frequency of 100 Hz
::

METHOD:: asOSCArgEmbeddedArray
Appends the CV's current value as OSC compliant argument to the given link::Classes/Array::

ARGUMENT:: array
Usually an link::Classes/Array:: of numerical values.

returns:: an OSC compliant representation of the CV's value appended to a given array

discussion::
code::
c = CV.new;
c.value_([0.1, 0.2, 0.3]);
c.asOSCArgEmbeddedArray([1, 2, 3, 4, 5]).postcs; // [1, 2, 3, 4, $[, 0.1, 0.2, 0.3, $]]
::

METHOD:: split
Split a multi-value CV into an array of CVs.

returns:: An link::Classes/Array:: of CVs

discussion::
code::
c = CV([[0, 0, 0, 0, 0], [5, 5, 5, 5, 5]].asSpec);
c.split; // [ a CV, a CV, a CV, a CV, a CV ]
::

METHOD:: next
As CV inherits from link::Classes/Stream:: this method implements the method defined in the Stream interface. Calling this method simply returns the CV's value.

returns:: A link::Classes/Float:: or an link::Classes/Integer:: or an link::Classes/Array:: of numeric values

METHOD:: size
Return the size of the CV's internal ControlSpec. I.e. a CV's value or input will be a single numeric value if the ControlSpec

returns:: An link::Classes/Integer:: denoting the size of the CV's value

METHOD:: touch

METHOD:: asControlInput


subsection:: CV connections using SimpleControllers

When a CV's value is changed a changed message (identified by the symbol code::\synch::) is send to update any dependant objects. For example, code::action_(function):: creates a link::Classes/SimpleController:: which is added to the dependants of the CV and evaluated whenever the CV changes value. This same basic mechanism is used to connect the CV to GUIs, server, objects, and some other objects in the language. Most of this is more or less hidden from view.

Under normal circumstances, CV connections are automatically removed when the targeted link::Classes/Control::, link::Classes/Bus:: or link::Classes/View:: is deleted. If there is a program error, it is possible that connections will persist and will need to be explicitly removed.

METHOD:: addController
Create and return a dependant link::Classes/SimpleController:: that evaluates the function whenever the CV's value is altered. Though the method takes a function as argument it is important to understand that it creates a new SimpleController. The function can not be updated or altered later, only the controller can be removed and a new one be added. The first argument passed to the function will always be the CV itself, making it easy to query the CV's current value or input.

ARGUMENT:: function
an arbitrary link::Classes/Function::
returns:: a link::Classes/SimpleController::

discussion::
code::
a = CV(\freq);
// action_ returns a SimpleController
// for an explicit removal it may be stored in a variable
c = a.addController({ |cv| "the value of a is now %\n".postf(cv.value) });
a.input_(0.7); // try with different values between 0 and 1
a.value_(456); // or set the value explicitely
// only remove c
c.remove;
a.input_(0.3); // no posts anymore
// add the SimpleController again
c = a.addController({ |cv| "the value of a is now %\n".postf(cv.value) });
// and another one
d = a.addController({ |cv| "the input of a is now %\n".postf(cv.input) });
a.value_(456); // both, c and d's functions are triggered
a.release; // remove all dependants at once
::

METHOD:: removeAllControllers
Remove all link::Classes/SimpleController::s that have been added with link::#-addController::. Possibly it's more important to be able to remove single controllers. However, some CVs create controllers behind the sceneswhen being instantiated. The method aims to be a clean-up possibility, removing sideeffects.
NOTE:: code::removeAllControllers:: will only remove actions that have been added to the CV while keeping synchronisations with sliders and other views. However, CV also inherits a method link::Classes/Object#-release:: which will completly uninitialize the CV, removing all dependants.::

subsection:: GUI connections

METHOD:: connect
Connects a CV to a view. link::Classes/Array:: defines connect to allow a set of CVs to be connected to a view with multiple control values (i.e., link::Classes/Slider2D::).

The following methods establish connections link::Classes/View::s and CVs.
code::
// pseudo-code
Slider-connect(aCV)
NumberBox-connect(aCV)
Slider2D-connect([xCV, yCV])
RangeSlider-connect([loCV, hiCV])
MultiSliderView-connect(aCV)	// for CVs with multiple values
PopupMenu-connect(aCV)	// for SVs, displays SV-items
ListView-connect(aCV)	// for SVs
TextField-connect(aCV) // for multidimensional CVs
TextView-connect(aCV) // for multidimensional CVs, needs a keyDownAction or keyUpAction to update the CV
StaticText-connection(aCV) // for multidimensional CVs, non-editable
::

One CV can be connected to many views but each view is connected to only one CV. When a CV's value changes, it is relayed to all of its dependants including the source of the the change. That way, the GUI accurately reflects the new value of the CV. See the behavior of 'b' in the following example.

note::
The following example provides a generic graphic interface to two CVs. Subsequent examples depend on that window, so leave it open until you are finished working through the help file. (The interpreter variables 'a' and 'b' contain the CVs used by the examples, so they should be left unaltered.)
::

code::
(
// create a couple of CVs
a = CV(\freq);
b = CV.new.sp(-10,-100,20, 10);

// make a window
w = Window("CV Demo", Rect(64, 0, 400, 300)).front;
w.view.decorator = FlowLayout(w.view.bounds);

// CVs can be connected to Slider and NumberBox.
z = NumberBox(w, Rect(0, 0, 50, 20));
a.connect(z);

y = Slider(w, Rect(50, 0, 150, 20));
a.connect(y);

w.view.decorator.nextLine;

b.connect(NumberBox(w, Rect(0, 0, 50, 20)));
b.connect(Slider(w, Rect(50, 0, 150, 20)));

w.view.decorator.nextLine;

//	Pairs of CVs can be connected to RangeSlider, Slider2D
[a,b].connect(RangeSlider(w, Rect(0, 0, 200, 20)));

w.view.decorator.nextLine;
[a,b].connect(Slider2D(w, Rect(0, 0, 200, 200)));
)
::

An example connecting a MultiSliderView
code::
(
// create a CV with a 'multi-dimensional' ControlSpec
c = CV([20, 20000, \exp, 0.0, { 20.rrand(20000) }!7, " hz"].asSpec);

x = Window("CV MultiSlider Demo", Rect(100, 100, 400, 300)).front;
x.view.decorator = f = FlowLayout(x.view.bounds);
m = MultiSliderView(x, f.innerBounds.width@f.innerBounds.height);
c.connect(m);
c.action_({ |cv| "the CV's value is now %\n".postf(cv.value) });
)
::

ARGUMENT:: view
a link::Classes/View::, usable with a CV. See link::#*viewDictionary:: to for an overview of qualified views.

subsection:: Server connections

OSC commands (i.e., code::/n_set::,  code::/s_new::) specify initial values of parameters as a flat link::Classes/Array:: of pairs consisting of a name and its initial value:

code::
[frequency: 440, amplitude: 1, ...]
::

"Extended argument arrays" allow CVs to be used in place of the initial value. This is the standard syntax for establishing connections between CVs and a server. In an extended argument array, the CV's value can be altered before being sent, multiple CV's can determine the value to be sent, and the value to be sent can be determined by a function (here code::freq:: is just meant as an example key):

table::
## strong::value:: || [freq: 440]
## strong::CV:: || [freq: aCV]
## strong::altered CV:: || [freq: [aCV, aCV.midicps]]
## strong::combination:: || [freq: [[aCV, bCV], aCV.midicps + bCV]]
## strong::function:: || code::[freq: [aCV, { aCV.midicps.value + 33.rand }]::
::

For example, the method link::Classes/Synth#*controls:: is identical to link::Classes/Synth#*new:: except the code::args:: parameter is extended:

code::
// basic CV connection
(
Synth.controls("default", [
	freq: a
]);
)

// modified CV connection
(
Synth.controls("default", [
	amp: [b, b.dbamp],
	freq: a
]);
)

// multiple modified connection
(
Synth.controls("default", [
	freq: [
		[a,b], a + b
	],
	amp: [
		[a,b], (a.cpsmidi.neg/4 + b).dbamp
	]
]);
)
::

In the previous two examples, the modifying expression is actually a combination of link::Classes/Stream::s altered with link::Overviews/Operators#Binary Operators#binary:: and link::Overviews/Operators#Unary Operators#unary operators::. This is concise, but in some cases, it may be necessary to use a link::Classes/Function:: to define the modification.
note::Within a function definition it is necessary to explicitly extract the value of the CV using a link::Classes/CV#-value#value:: message.::

code::
// a Function modifying the CV connection
(
Synth.controls("default", [
	freq: [b, {
		var index;
		(index = b.value + 100 /12 ).asInteger;
		[100,200,300,400,500, 600].mirror.at(index)
	}],
	amp: [
		[a,b], { (a.value.cpsmidi.neg/4 + b.value).dbamp }
	]
])
)
::

subsection:: Summary of Node related connection methods

definitionList::
## Array ||
link::Classes/Array#-connectToNode::: the receiver is a flat array of name/value pairs

link::Classes/Array#-connectToBuffer::: the receiver is an array of CVs

link::Classes/Array#-connectToBus::: the receiver is an array of CVs.
## Node ||
link::Classes/Node#-setControls::: connects CVs to named controls
## NodeProxy ||
link::Classes/NodeProxy#-setControls::: connects CVs to named controls
code::
(
c = CV.new.sp(-20, -100, 120);
p = NodeProxy.audio(s, 2);
p.play; //play to hardware output, return a group with synths
p.setControls([f: a, c: [b, { \freq.asSpec.map(b.input)}]]);
b.input_(0.5);
p.source = { arg f=400, c = 400; PMOsc.ar(f , c, 4, 0, 0.1) };
)
::
## Synth ||
link::Classes/Synth#*controls::: the same as link::Classes/Synth#*new:: but allows CVs to be used in the args array
## Bus ||
link::Classes/Bus#*controls:::
code::
(
c = { arg f = 400,  a = -20, pan = 0; Pan2.ar(SinOsc.ar(f, 0, a.dbamp), pan) }.play;
d = Bus.controls([a, b], s);
[a, b].connectToBus(d.server, d.index);
Routine({
	// need to make sure the synth has been created...
	s.sync;
	c.map(\f, d.index, \a, d.index + 1);
}).play;
)
::
link::Classes/Bus#-setControls::: connects CVs to consecutive buses
code::
(
c = { arg f = 400, a = -20, pan = 0; Pan2.ar(SinOsc.ar(f, 0, a.dbamp), pan) }.play;
d = Bus.control(s, 3);
d.setControls([a, b]);
[a, b].connectToBus(d.server, d.index);
Routine({
	// need to make sure the synth has been created...
	s.sync;
	c.map(\f, d.index, \a, d.index + 1);
}).play;
)
::
::

subsection:: Reading and writing CVs in functions and patterns

definitionList::
## Tasks ||
Within a link::Classes/Function::, CVs are accessed using link::#-value#value:: and link::#-input#value:: and altered using link::#-value#value_:: and link::#-input#input_::.

code::
(
Task({
	10.do({
		// print the value scaled to the range [0, 1]
		a.input.post; " ".post;
		// print the actual value
		a.value.postln;
		// select a new value at random
		a.input_(1.0.rand);
		// the weighting of values will conform to the warp
		// with \exp, values fall uniformly in each octave
		wait(0.1);
	})
}).play(AppClock)
)
::
## Patterns ||
Within a pattern definition, a CV can directly substitute for a link::Classes/Pattern:::

code::
(
SynthDescLib.global.read;
Pbind(
	\instrument, \default,
	\freq, a,
	\db, b,
	\dur, 0.2
).play(quant: 0);
)
::

link::Classes/Pfunc:: can be used to change the CV from within a Pattern:
code::
(
SynthDescLib.global.read;
Pbind(
	\instrument, \default,
	\freq, Pwhite(100, 1000).round(100),
	\placeholder, Pfunc({ arg ev; a.value_(ev.at(\freq)) }),
	\db, b,
	\dur, 0.2
).play;
)
::
::

subsection:: CVs and external input

The link::#-input#input_(in):: method makes it easy to connect a CV to any control source:

code::
// MIDI
(
MIDIClient.init;
MIDIIn.connect(0, 0);
MIDIIn.control = { arg src, chan, num, val;	a.input_(val/127) }
)
::

The methods link::#-input#input and input_:: are also used by link::Classes/CVPreset:: to allow interpolations between settings that follow warp of the CV's link::Classes/ControlSpec::.